swagger: "2.0"
info:
  description: "This is documentation for a simple articles API"
  version: "1.0.0"
  title: "EBS Test REST API"
  contact:
    email: "canteadumitru@gmail.com"
host: "localhost:41725"
basePath: ""
tags:
- name: "articles"
  description: "Simple articles"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/mitica/ebs-test"
- name: "auth"
  description: "Authentication"
- name: "users"
  description: "API users"
schemes:
- "http"
paths:
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Login an user with email & password or with a facebookId"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login data"
        required: true
        schema:
          $ref: "#/definitions/LoginInput"
      responses:
        404:
          description: "User not found"
        200:
          description: User found
        422:
          description: Invalid data
  /auth/register:
    post:
      tags:
      - "auth"
      summary: "Register an user in the store"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Register data"
        required: true
        schema:
          $ref: "#/definitions/RegisterInput"
      responses:
        201:
          description: User created
        422:
          description: Invalid input data
  /articles:
    get:
      tags:
      - "articles"
      summary: "Get a list of articles from the store"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: Got article list
          schema:
            type: array
            items:
              $ref: "#/definitions/Article"
    post:
      tags:
      - "articles"
      summary: "Add a new article to the store"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Article object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/ArticleInput"
      responses:
        201:
          description: Article created
          schema:
            $ref: "#/definitions/Article"
        422:
          description: Invalid input data

  /articles/{id}/vote:
    post:
      tags:
      - "articles"
      summary: "Vote for an article"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        required: true
        description: "Article id"
        schema:
          type: "string"
      - in: "body"
        name: "body"
        description: "Vote info"
        required: true
        schema:
          $ref: "#/definitions/ArticleVoteInput"
      responses:
        422:
          description: "Invalid data"
        200:
          description: "Voted with success"
          schema:
            $ref: "#/definitions/ArticleVoteResult"
  /users:
    get:
      tags:
      - "users"
      summary: "Get users from the store"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Got users"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
    post:
      tags:
      - "users"
      summary: "Creates a new user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to create"
        required: true
        schema:
          $ref: "#/definitions/UserInput"
      responses:
        201:
          description: User created
          schema:
            $ref: "#/definitions/User"
        422:
          description: Invalid input data
  /users/me:
    get:
      tags:
      - "users"
      summary: "Get current logged user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Got data"
          schema:
            $ref: "#/definitions/User"
  
definitions:
  ArticleVoteInput:
    type: "object"
    properties:
      articleId:
        type: "string"
      type:
        type: "string"
        description: "Vote Type"
        enum:
        - "UP"
        - "DOWN"
    required:
    - articleId
    - type
    xml:
      name: "ArticleVoteInput"
  ArticleVoteResult:
    type: "object"
    properties:
      counts:
        type: "object"
        properties:
          countUpVotes:
            type: "integer"
            description: "Count up votes"
          countDownVotes:
            type: "integer"
            description: "Count down votes"
      vote:
        type: "object"
        properties:
          id:
            type: string
          articleId:
            type: string
          userId:
            type: string
    required:
    - counts
    - vote
    xml:
      name: "ArticleVoteResult"
  Article:
    type: "object"
    properties:
      id:
        type: "string"
      title:
        type: "string"
      body:
        type: "string"
      createdAt:
        type: "string"
      updatedAt:
        type: "string"
      countUpVotes:
        type: "integer"
      countDownVotes:
        type: "integer"
    xml:
      name: "Article"
  ArticleInput:
    type: "object"
    properties:
      title:
        type: "string"
      body:
        type: "string"
    required:
    - title
    xml:
      name: "ArticleInput"
  LoginInput:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      facebookId:
        type: "string"
    required:
    - email
    xml:
      name: "LoginInput"
  RegisterInput:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      facebookId:
        type: "string"
    required:
    - email
    xml:
      name: "RegisterInput"
  UserInput:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      facebookId:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
    required:
    - email
    xml:
      name: "UserInput"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      email:
        type: "string"
      facebookId:
        type: "string"
      createdAt:
        type: "string"
      updatedAt:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      role:
        type: "string"
        description: "User role"
        enum:
        - "user"
        - "admin"
    xml:
      name: "User"

externalDocs:
  description: "Find out more about tihs test"
  url: "https://github.com/mitica/ebs-test"